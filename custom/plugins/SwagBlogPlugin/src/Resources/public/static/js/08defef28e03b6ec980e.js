(window["webpackJsonpPluginswag-blog-plugin"]=window["webpackJsonpPluginswag-blog-plugin"]||[]).push([[955],{266:function(){},955:function(e,a,t){"use strict";t.r(a),t.d(a,{default:function(){return r}}),t(533);let{Mixin:o,Data:{Criteria:i},Context:l}=Shopware,{mapPropertyErrors:s}=Shopware.Component.getComponentHelper();var r={template:'{% block swag_blog_detail %}\n	<sw-page class="swag-blog-detail">\n\n		<template #smart-bar-header>\n			<h2 v-if="blog && blog.title">\n				{{ blog.title }}\n			</h2>\n			<h2 v-else>\n				{{ $tc(\'swag-blog.detail.titleNew\') }}\n			</h2>\n		</template>\n\n		<template #smart-bar-actions>\n			\n			<sw-button variant="primary" :disabled="isLoading" @click="onSave">\n				{{ $tc(\'global.default.save\') }}\n			</sw-button>\n		</template>\n\n		<template #content>\n			<sw-card-view>\n				<sw-card :title="$tc(\'swag-blog.detail.cardGeneral\')">\n					<sw-text-field v-model:value="blog.title" label="Title" :error="blog.errors?.title" required/>\n					<sw-textarea-field v-model:value="blog.description" label="Description" :error="blog.errors?.description"/>\n\n					<sw-text-field v-model:value="blog.author" label="Author" :error="blog.errors?.author" required/>\n\n					<sw-single-select v-model:value="blog.categoryId" label="Category" :error="blog.errors?.categoryId" :options="categoryOptions" display-field="label" value-property="value" placeholder="Select a category" required/>\n					<sw-datepicker v-model:value="blog.publishedAt" :label="$tc(\'swag-blog.detail.labelPublishedAt\')" size="medium" required :date-type="isDateTime" :error="blog.errors?.publishedAt"/>\n\n					{% block sw_blog_detail_logo_upload %}\n\n						<sw-upload-listener :upload-tag="mediaUploadTag" auto-upload @media-upload-finish="onUploadMedia"/>\n\n						<sw-media-upload-v2 :source="blog.mainImage" :allow-multi-select="false" :upload-tag="mediaUploadTag" :default-folder="blogRepository.entityName" @sw-media-upload-v2-media-upload-success="onUploadMedia" @media-drop="onUploadMedia" @media-upload-sidebar-open="openMediaModal" @media-upload-remove-image="onUnlinkLogo"/>\n\n						<sw-media-modal-v2 v-if="showMediaModal" :allow-multi-select="false" :entity-context="mediaUploadTag" @media-modal-selection-change="onSelectMedia" @media-upload-finish="onUploadMedia" @modal-close="closeMediaModal"/>\n						<sw-media-preview v-if="blog.mainImage" :media="blog.mainImage" :show-toolbar="true">\n							<template #toolbar>\n								<sw-button variant="danger" @click="onUnlinkLogo">Remove</sw-button>\n							</template>\n						</sw-media-preview>\n					{% endblock %}\n				</sw-card>\n			</sw-card-view>\n		</template>\n	</sw-page>\n{% endblock %}\n',compatConfig:Shopware.compatConfig,inject:["repositoryFactory","acl"],mixins:[o.getByName("notification"),o.getByName("discard-detail-page-changes")("blog")],props:{blogId:{type:String,required:!1,default:null}},data(){return{blog:{title:"",description:"",categoryId:null,mainImageId:null,mainImage:null,errors:{},publishedAt:null},categories:[],isLoading:!1,isSaveSuccessful:!1,showMediaModal:!1}},computed:{identifier(){return this.blog?this.blog.title:""},isCreateMode(){return!this.blogId&&!this.blog?.id},blogRepository(){return this.repositoryFactory.create("swag_blog")},categoryRepository(){return this.repositoryFactory.create("swag_blog_category")},categoryOptions(){return this.categories.map(e=>({value:e.id,label:e.name}))},mediaUploadTag(){return`sw-blog-detail--${this.blog?.id??"new"}`},...s("blog",["title","categoryId","author"])},created(){this.createdComponent()},methods:{async createdComponent(){await this.loadCategories(),await this.loadEntity()},async loadCategories(){let e=new i(1,100);e.addSorting(i.sort("name","ASC")),this.categories=await this.categoryRepository.search(e,l.api)},async loadEntity(){this.isLoading=!0;try{let e=new i;e.addAssociation("mainImage");let a=await this.blogRepository.get(this.blogId||this.$route.params.id,l.api,e);a&&(a.errors=a.errors||{},!a.publishedAt||a.publishedAt instanceof Date?a.publishedAt||(a.publishedAt=null):a.publishedAt=new Date(a.publishedAt),this.blog=a)}catch(e){this.createNotificationError({message:"Failed to load blog data."})}finally{this.isLoading=!1}},openMediaModal(){this.showMediaModal=!0},closeMediaModal(){this.showMediaModal=!1},onSelectMedia(e){if(!e||0===e.length)return;let a=e[0];this.blog.mainImageId=a.id,this.blog.mainImage=a,this.showMediaModal=!1},onUploadMedia({targetId:e,media:a}){this.blog.mainImageId=e,a&&(this.blog.mainImage=a)},onDropMedia(e){this.onUploadMedia({targetId:e.id,media:e})},onUnlinkLogo(){this.blog.mainImageId=null,this.blog.mainImage=null},validateBlog(){this.blog.errors={};let e=!0;return this.blog.title&&""!==this.blog.title.trim()||(this.blog.errors.title="Title must not be empty",this.createNotificationError({message:"Please fill the Title field."}),e=!1),this.blog.author&&""!==this.blog.author.trim()||(this.blog.errors.author="Author must not be empty",this.createNotificationError({message:"Please fill the Author field."}),e=!1),this.blog.categoryId||(this.blog.errors.categoryId="Category must be selected",this.createNotificationError({message:"Please select a Category."}),e=!1),e},async onSave(){if(this.validateBlog()){this.isLoading=!0;try{await this.blogRepository.save(this.blog,l.api),this.isSaveSuccessful=!0,this.isCreateMode?(this.createNotificationSuccess({message:"Blog created successfully."}),this.$router.push({name:"swag.blog.detail",params:{id:this.blog.id}})):this.createNotificationSuccess({message:"Blog updated successfully."})}catch(e){console.error("Blog save failed:",e),this.createNotificationError({message:"Failed to save blog."})}finally{this.isLoading=!1}}},onCancel(){this.$router.push({name:"swag.blog.index"})}}}},533:function(e,a,t){var o=t(266);o.__esModule&&(o=o.default),"string"==typeof o&&(o=[[e.id,o,""]]),o.locals&&(e.exports=o.locals),(0,t(534).A)("2f0acd63",o,!0,{})}}]);